
if(SEPARATE_DBG)
    # FIXME: http://sourceware.org/bugzilla/show_bug.cgi?id=11822
    set(CMAKE_LDR_PE_HELPER_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
    set(CMAKE_LDR_PE_HELPER_STANDARD_LIBRARIES "-lgcc" CACHE STRING "Standard C Libraries")
endif()

spec2def(freeldr.sys freeldr.spec)

if(ARCH STREQUAL "i386")
    CreateBootSectorTarget(frldr16
        ${CMAKE_CURRENT_SOURCE_DIR}/arch/realmode/i386.S
        ${CMAKE_CURRENT_BINARY_DIR}/frldr16.bin
        F800)
elseif(ARCH STREQUAL "amd64")
    CreateBootSectorTarget(frldr16
        ${CMAKE_CURRENT_SOURCE_DIR}/arch/realmode/amd64.S
        ${CMAKE_CURRENT_BINARY_DIR}/frldr16.bin
        F800)
endif()

include_directories(BEFORE include)
include_directories(${REACTOS_SOURCE_DIR}/ntoskrnl/include)
include_directories(${REACTOS_SOURCE_DIR}/lib/cmlib)
include_directories(${REACTOS_SOURCE_DIR}/include/reactos/libs)
include_directories(${REACTOS_SOURCE_DIR}/include/reactos/elf)

add_definitions(-D_NTHAL_ -D_BLDR_ -D_NTSYSTEM_)

if((ARCH STREQUAL "arm") AND (SARCH STREQUAL "omap-zoom2"))
    add_definitions(-D_ZOOM2_)
endif()

list(APPEND FREELDR_COMMON_SOURCE
    cmdline.c
    debug.c
    linuxboot.c
    machine.c
    options.c
    oslist.c
    version.c
    arcemul/time.c
    cache/blocklist.c
    cache/cache.c
    comm/rs232.c
    disk/disk.c
    disk/partition.c
    disk/ramdisk.c
    #disk/scsiport.c
    fs/ext2.c
    fs/fat.c
    fs/fs.c
    fs/iso.c
    fs/ntfs.c
    fs/pxe.c
    inifile/ini_init.c
    inifile/inifile.c
    inifile/parse.c
    mm/meminit.c
    mm/mm.c
    mm/heap.c
    reactos/registry.c
    reactos/arcname.c
    reactos/archwsup.c
    ui/directui.c
    ui/gui.c
    ui/minitui.c
    ui/noui.c
    ui/tui.c
    ui/tuimenu.c
    ui/ui.c
    video/fade.c
    video/palette.c
    video/video.c
    windows/conversion.c
    windows/peloader.c
    windows/winldr.c
    windows/wlmemory.c
    windows/wlregistry.c)

if(ARCH STREQUAL "i386")
    list(APPEND FREELDR_COMMON_ASM_SOURCE
        arch/i386/entry.S
        arch/i386/i386pnp.S
        arch/i386/i386trap.S
        arch/i386/linux.S
        arch/i386/mb.S)
    list(APPEND FREELDR_COMMON_SOURCE
        arch/i386/archmach.c
        arch/i386/custom.c
        arch/i386/drivemap.c
        arch/i386/halstub.c
        arch/i386/hardware.c
        arch/i386/hwacpi.c
        arch/i386/hwapm.c
        arch/i386/hwdisk.c
        arch/i386/hwpci.c
        arch/i386/i386bug.c
        arch/i386/i386disk.c
        arch/i386/i386idt.c
        arch/i386/i386rtl.c
        arch/i386/i386vid.c
        arch/i386/machpc.c
        arch/i386/miscboot.c
        arch/i386/ntoskrnl.c
        arch/i386/pccons.c
        arch/i386/pcdisk.c
        arch/i386/pcmem.c
        arch/i386/pcrtc.c
        arch/i386/pcvideo.c
        arch/i386/machxbox.c
        arch/i386/xboxcons.c
        arch/i386/xboxdisk.c
        arch/i386/xboxfont.c
        arch/i386/xboxhw.c
        arch/i386/xboxi2c.c
        arch/i386/xboxmem.c
        arch/i386/xboxrtc.c
        arch/i386/xboxvideo.c
        arch/i386/winldr.c
        windows/headless.c
        disk/scsiport.c)
    if(NOT MSVC)
        list(APPEND FREELDR_COMMON_SOURCE arch/i386/drvmap.S)
    endif()
elseif(ARCH STREQUAL "amd64")
    list(APPEND FREELDR_COMMON_ASM_SOURCE
        arch/amd64/entry.S
        arch/amd64/int386.S
        arch/amd64/pnpbios.S)
    list(APPEND FREELDR_COMMON_SOURCE
        arch/i386/hardware.c
        arch/i386/hwacpi.c
        arch/i386/hwapm.c
        arch/i386/hwdisk.c
        arch/i386/hwpci.c
        arch/i386/i386bug.c
        arch/i386/i386rtl.c
        arch/i386/i386disk.c
        arch/i386/i386vid.c
        arch/i386/machpc.c
        arch/i386/ntoskrnl.c
        arch/i386/pccons.c
        arch/i386/pcdisk.c
        arch/i386/pcmem.c
        arch/i386/pcrtc.c
        arch/i386/pcvideo.c
        arch/amd64/winldr.c)
else()
#TBD
endif()

if(NOT MSVC)
    add_library(freeldr_common OBJECT ${FREELDR_COMMON_SOURCE} ${FREELDR_COMMON_ASM_SOURCE})
else()
    add_asm_files(freeldr_common_asm ${FREELDR_COMMON_ASM_SOURCE})
    add_library(freeldr_common ${FREELDR_COMMON_SOURCE} ${freeldr_common_asm})
endif()
add_dependencies(freeldr_common bugcodes)

if(ARCH STREQUAL "i386" AND NOT MSVC)
    list(APPEND FREELDR_BASE_SOURCE arch/i386/multiboot.S)
endif()

list(APPEND FREELDR_BASE_SOURCE
    bootmgr.c # This file is compiled with custom definitions
    freeldr.c
    rtl/libsupp.c)

if(NOT MSVC)
    list(APPEND FREELDR_BASE_SOURCE ${CMAKE_CURRENT_BINARY_DIR}/freeldr.def)
endif()

if(NOT MSVC)
    add_library(freeldr_pe SHARED $<TARGET_OBJECTS:freeldr_common> ${FREELDR_BASE_SOURCE})
    add_library(freeldr_pe_dbg SHARED EXCLUDE_FROM_ALL $<TARGET_OBJECTS:freeldr_common> ${FREELDR_BASE_SOURCE})
    if(SEPARATE_DBG)
        set_target_properties(freeldr_pe PROPERTIES LINKER_LANGUAGE LDR_PE_HELPER)
        set_target_properties(freeldr_pe_dbg PROPERTIES LINKER_LANGUAGE LDR_PE_HELPER)
    endif()
else()
    add_library(freeldr_pe SHARED ${FREELDR_BASE_SOURCE})
    add_library(freeldr_pe_dbg SHARED EXCLUDE_FROM_ALL ${FREELDR_BASE_SOURCE})
endif()

if(NOT MSVC)
    add_target_link_flags(freeldr_pe "-Wl,--strip-all,--exclude-all-symbols,--file-alignment,0x1000,-T,${CMAKE_CURRENT_SOURCE_DIR}/freeldr_i386.lds")
    add_target_link_flags(freeldr_pe_dbg "-Wl,--exclude-all-symbols,--file-alignment,0x1000,-T,${CMAKE_CURRENT_SOURCE_DIR}/freeldr_i386.lds")
else()
    add_target_link_flags(freeldr_pe "/ignore:4078 /ignore:4254 /DRIVER /FIXED /ALIGN:0x400 /SECTION:.text,ERW /SECTION:.data,RW /MERGE:.text16=.text /MERGE:.data=.text /MERGE:.rdata=.text /MERGE:.bss=.text ")
    add_target_link_flags(freeldr_pe_dbg "/ignore:4078 /ignore:4254 /DRIVER /FIXED /ALIGN:0x400 /SECTION:.text,ERW /SECTION:.data,RW /MERGE:.text16=.text /MERGE:.data=.text /MERGE:.rdata=.text /MERGE:.bss=.text")
endif()

set_image_base(freeldr_pe 0x10000)
set_subsystem(freeldr_pe native)
set_entrypoint(freeldr_pe RealEntryPoint)

set_image_base(freeldr_pe_dbg 0x10000)
set_subsystem(freeldr_pe_dbg native)
set_entrypoint(freeldr_pe_dbg RealEntryPoint)

if(ARCH STREQUAL "i386")
    target_link_libraries(freeldr_pe mini_hal)
    target_link_libraries(freeldr_pe_dbg mini_hal)
endif()

if(MSVC)
    target_link_libraries(freeldr_pe freeldr_common)
    target_link_libraries(freeldr_pe_dbg freeldr_common)
endif()

target_link_libraries(freeldr_pe cportlib cmlib rtl libcntpr)
target_link_libraries(freeldr_pe_dbg cportlib cmlib rtl libcntpr)

# add_pch(freeldr_pe include/freeldr.h)

add_dependencies(freeldr_pe asm)
add_dependencies(freeldr_pe_dbg asm)

concatenate_files(
    ${CMAKE_CURRENT_BINARY_DIR}/frldr16.bin
    freeldr_pe
    ${CMAKE_CURRENT_BINARY_DIR}/freeldr.sys)

add_custom_target(freeldr ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/freeldr.sys)

# rename freeldr on livecd to setupldr.sys because isoboot.bin looks for setupldr.sys
add_cd_file(TARGET freeldr FILE ${CMAKE_CURRENT_BINARY_DIR}/freeldr.sys DESTINATION loader NO_CAB FOR bootcd regtest)
add_cd_file(TARGET freeldr FILE ${CMAKE_CURRENT_BINARY_DIR}/freeldr.sys DESTINATION loader NO_CAB FOR livecd NAME_ON_CD setupldr.sys)

list(APPEND SETUPLDR_SOURCE
    inffile/inffile.c)

if(ARCH STREQUAL "i386" OR ARCH STREQUAL "amd64")
    list(APPEND SETUPLDR_SOURCE windows/setupldr.c)
endif()

if(NOT MSVC)
    add_library(setupldr_pe SHARED $<TARGET_OBJECTS:freeldr_common> ${FREELDR_BASE_SOURCE} ${SETUPLDR_SOURCE})
    add_library(setupldr_pe_dbg SHARED EXCLUDE_FROM_ALL $<TARGET_OBJECTS:freeldr_common> ${FREELDR_BASE_SOURCE} ${SETUPLDR_SOURCE})
    if(SEPARATE_DBG)
        set_target_properties(setupldr_pe PROPERTIES LINKER_LANGUAGE LDR_PE_HELPER)
        set_target_properties(setupldr_pe_dbg PROPERTIES LINKER_LANGUAGE LDR_PE_HELPER)
    endif()
else()
    add_library(setupldr_pe SHARED ${FREELDR_BASE_SOURCE} ${SETUPLDR_SOURCE})
    add_library(setupldr_pe_dbg SHARED EXCLUDE_FROM_ALL ${FREELDR_BASE_SOURCE} ${SETUPLDR_SOURCE})
endif()

if(NOT MSVC)
    add_target_link_flags(setupldr_pe "-Wl,--strip-all,--exclude-all-symbols,--file-alignment,0x1000,-T,${CMAKE_CURRENT_SOURCE_DIR}/freeldr_i386.lds")
    add_target_link_flags(setupldr_pe_dbg "-Wl,--exclude-all-symbols,--file-alignment,0x1000,-T,${CMAKE_CURRENT_SOURCE_DIR}/freeldr_i386.lds")
else()
    add_target_link_flags(setupldr_pe "/ignore:4078 /ignore:4254 /DRIVER /FIXED /ALIGN:0x400 /SECTION:.text,ERW /SECTION:.data,RW /MERGE:.text16=.text /MERGE:.data=.text /MERGE:.rdata=.text /MERGE:.bss=.text")
    add_target_link_flags(setupldr_pe_dbg "/ignore:4078 /ignore:4254 /DRIVER /FIXED /ALIGN:0x400 /SECTION:.text,ERW /SECTION:.data,RW /MERGE:.text16=.text /MERGE:.data=.text /MERGE:.rdata=.text /MERGE:.bss=.text")
endif()

add_target_compile_definitions(setupldr_pe FREELDR_REACTOS_SETUP)
add_target_compile_definitions(setupldr_pe_dbg FREELDR_REACTOS_SETUP)

set_image_base(setupldr_pe 0x10000)
set_subsystem(setupldr_pe native)
set_entrypoint(setupldr_pe RealEntryPoint)

set_image_base(setupldr_pe_dbg 0x10000)
set_subsystem(setupldr_pe_dbg native)
set_entrypoint(setupldr_pe_dbg RealEntryPoint)

if(ARCH STREQUAL "i386")
    target_link_libraries(setupldr_pe mini_hal)
    target_link_libraries(setupldr_pe_dbg mini_hal)
endif()

if(MSVC)
    target_link_libraries(setupldr_pe freeldr_common)
    target_link_libraries(setupldr_pe_dbg freeldr_common)
endif()

target_link_libraries(setupldr_pe cportlib cmlib rtl libcntpr)
target_link_libraries(setupldr_pe_dbg cportlib cmlib rtl libcntpr)

add_dependencies(setupldr_pe asm)
add_dependencies(setupldr_pe_dbg asm)

concatenate_files(
    ${CMAKE_CURRENT_BINARY_DIR}/frldr16.bin
    setupldr_pe
    ${CMAKE_CURRENT_BINARY_DIR}/setupldr.sys)

add_custom_target(setupldr ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/setupldr.sys)
add_cd_file(TARGET setupldr FILE ${CMAKE_CURRENT_BINARY_DIR}/setupldr.sys DESTINATION loader NO_CAB FOR bootcd regtest)
