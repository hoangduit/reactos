<chapter>
<title>ReactOS Architecture Whitepaper</title>

<!--
<artheader>
   <title>ReactOS Architecture Whitepaper</title>
   <author>
      <firstname>Jason</firstname>
      <surname>Filby</surname>
      <affiliation>
        <address>
          <email>jasonfilby@yahoo.com</email>
        </address>
      </affiliation>
   </author>
   <author>
      <firstname>Steven</firstname>
      <surname>Edwards</surname>
      <affiliation>
        <address>
          <email>Steven_Ed4153@yahoo.com</email>
        </address>
      </affiliation>
   </author>
</artheader>
-->

<abstract>
<para>
ReactOS Architecture Overview.
</para>
</abstract>

<sect2>
<title>TABLE OF CONTENTS</title>
<itemizedlist>
<listitem>1 Introduction</listitem>
<listitem>2 The Executive</listitem>
<listitem>2.1 Hardware Abstraction Layer</listitem>
<listitem>2.2 Device Drivers</listitem>
<listitem>2.3 Kernel</listitem>
<listitem>2.4 System Services</listitem>
<listitem>3 Protected Subsystems</listitem>
<listitem>4 Native API Architecture</listitem>
<listitem>5 Compatibility Targets</listitem>
</itemizedlist>
</sect2>

<sect2>
<title>1 INTRODUCTION</title>
<para>
The ReactOS architecture is based on that of Microsoft Windows NT 4.0. Although Microsoft claims that the architecture is a modified micro-kernel (combining aspects of both micro-kernels and layered operating systems), at ReactOS we have a different definition of the architecture. The NT, and therefore ReactOS architecture, is modular and layered. The small traces of microkernel architecture are not enough for it to be described as a modified micro-kernel.
</para>
<para>
At the lowest layer is the Executive. The executive includes everything that runs in kernel mode. Above the executive are the Protected Subsystems. These subsystems provide implementations of different Operating System personalities.
</para>
</sect2>

<sect2>
<title>2 THE EXECUTIVE</title>
<para>
The Executive is all the code that runs in kernel mode. The executive can roughly be broken up into the following components:
</para>
<itemizedlist>
<listitem>Hardware Abstraction Layer (HAL)</listitem>
<listitem>Device Drivers</listitem>
<listitem>The Kernel</listitem>
<listitem>System Services (including the Win32 subsystem)</listitem>
</itemizedlist>
<para>
These components all run in kernel mode. The HAL, Kernel, System Services and Device Drivers are collectively referred to as the Executive.
</para>
</sect2>

<sect2>
<title>2.1 HARDWARE ABSTRACTION LAYER</title>
<para>
The HAL makes it possible for the x86 ReactOS kernel and HAL to run on different x86 motherboards. The HAL abstracts motherboard specific code from the kernel, so that different motherboards do not require changes in the kernel. Examples for different hardware designs are the standard PC, the Japanese NEC PC98 or x86 SGI workstations.
</para>
</sect2>

<sect2>
<title>2.3 DEVICE DRIVERS</title>
<para>
Device drivers are hardware specific extensions to the ReactOS Executive. They allow the Operating System to interact with certain devices and visa versa.
</para>
<para>
ReactOS currently aims to implement the Windows NT 4.0 device driver model. The Windows Driver Model (WDM) is also a concern for the immediate future. WDM is a set of rules for writing portable Windows drivers.
</para>
<para>
Communication:
</para>
<para>
Device drivers use packets to communicate with the kernel and with other drivers. Packets are sent via the IO Manager (System Service) and make use of IRPs (IO Request Packets).
</para>
</sect2>

<sect2>
<title>2.4 KERNELS</title>
<para>
The kernel design is based on that of Microsoft Windows NT 4.0. It implements kernel mode Asynchronous Procedure Calls (APCs), Deferred Procedure Calls (DPCs), processes, threading, mutexes, semaphores, spinlocks, timing code and more.
</para>
</sect2>

<sect2>
<title>2.5 SYSTEM SERVICES</title>
<para>
System services include:
</para>
<itemizedlist>
<listitem>IO Manager</listitem>
<listitem>Configuration Manager</listitem>
<listitem>Plug and Play</listitem>
<listitem>Power Manager</listitem>
<listitem>Memory Manager</listitem>
<listitem>Executive Support</listitem>
<listitem>Object Manager</listitem>
<listitem>security reference monitor, process structure, local procedure call [?]</listitem>
<listitem>Win32 Subsystem</listitem>
</itemizedlist>
</sect2>

<sect2>
<title>3 PROTECTED SUBSYSTEMS</title>
<para>
The Protected Subsystems allow different Operating System personalities to run on top of the ReactOS Executive. The initial target for ReactOS was the Win32 subsystem -- however, the Win32 subsystem runs in kernel mode as part of the Executive and is not featured here.
</para>
<para>
User mode subsystems in the works:
</para>
<itemizedlist>
<listitem>POSIX</listitem>
<listitem>OS/2</listitem>
</itemizedlist>
<para>
Potential Protected Subsystems for the future:
</para>
<itemizedlist>
<listitem>DOS (Possibly a port of the FreeDOS Operating System)</listitem>
<listitem>Java Operating System (JOS: Open Source Java Operating System)</listitem>
<listitem>Many more</listitem>
</itemizedlist>
<para>
Graphical Interface for Subsystems via the Win32 Subsystem:
The Windows NT graphics device drivers are tightly integrated in design with the Win32 subsystem. Due to this it is impractical for a user mode subsystem to interact directly with the graphics drivers. For this reason, a subsystem should make use of the kernel mode Win32 subsystem for a graphics interface. Such a subsystem need not depend on the Win32 Window Manager, but can instead just use the graphics primitives provided by the Win32 subsystem.
</para>
</sect2>

<sect2>
<title>4 NATIVE API ARCHITECTURE</title>
<para>
The Native API Architecture alls for user mode code to call kernel mode services in a standard manner. It is the equivalent to the System Call Interface used by most UNIXes. Microsoft Windows NT/2000/XP does not document the Native API Architecture for programmers, they must use the Win32 APIs instead. Since ReactOS is Open Source, our Native API Architecture is open to the application programmer.
</para>
<para>
The Native API Architecture is implemented in NTDLL.DLL. Aside from containing Native API user mode entry points, NTDLL.DLL also contains process startup and module loading code. These entry points call KiSystemService in kernel mode, which looks up the kernel mode service in a system table - KiSystemServiceTable.
</para>
</sect2>

<sect2>
<title>5 COMPATIBILITY TARGETS</title>
<para>
The original target for ReactOS, with regards to driver and application compatibility, was Microsoft Windows NT 4.0. 
Since then, Microsoft Windows 2000 and Windows XP have been released.
</para>
<para>
Microsoft Windows 2000 and Windows XP are both descendants of Windows NT. 
As such we can gradually shift our compatibility target without worrying about the architecture changing too much. 
In fact, internally, Windows 2000 reports version information as Windows 5.0 and Windows XP as Windows 5.1.
</para>
<para>
The ReactOS team have decided to maintain Windows NT 4.0 as the official compatibility target. 
This is because most of the resources, articles and books on Windows NT/2000/XP technology are written for Windows NT 4.0. 
This does not mean that features present in later versions of Windows NT based operating systems will not be implemented in ReactOS.
</para>
</sect2>

</chapter>
