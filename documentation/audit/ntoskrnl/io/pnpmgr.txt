Audit: ntoskrnl / io / pnpmgr.c
References: 
	Books listed in reactos/media/doc/Books.txt
	other stuff in the internet (hpoussin may add more info sources here)

Audit Result: In progress

Functions:

IopGetDeviceNode()
Result: Clean (<5 lines)

IopQueryDeviceCapabilities()
Info:
	Google reports only references to ReactOS's source code, no results in msdn search too.
	IRP_MN_QUERY_CAPABILITIES and DEVICE_CAPABILITIES structure are described here: http://www.osronline.com/DDKx/kmarch/k112_22r6.htm
	Uses IopInitiatePnpIrp to send the IRP_MJ_PNP Irp
Result: Clean

IoInvalidateDeviceRelations()
Result: Clean (<5 lines)

IoGetDeviceProperty()
Info: This function is documented in lots of places (Google tells results: OSR, msdn, etc).
Result: Clean (has public documentation)

IoInvalidateDeviceState()
Result: Unimplemented -> Clean

IoOpenDeviceRegistryKey()
Result: Public function, documented -> Clean

IoRequestDeviceEject()
Result: Unimplemented -> Clean

IopGetSystemPowerDeviceObject()
Result: <5 lines of actual code -> Clean

IopGetBusTypeGuidIndex()
Info:
	Searches BusTypeGuid entry in the IopBusTypeGuidList list. If it is not found, create a new entry in the list and return its index
	Only ReactOS source code got in results of Google search. Function is heavily commented. There is a goto usage, however it's obvious and doesn't seem to come
	from reverse engineering.
Result: Probably clean (?)

IopCreateDeviceNode() / IopFreeDeviceNode()
Info: Google finds only ReactOS results. I haven't checked other information sources
Result: ?

IopInitiatePnpIrp()
Info:
	Google finds only ReactOS results.
	Sends a IRP_MJ_PNP Irp to a device stack.
	Method to send a synchronous Irp is well documented on the Web, and all used methods are documented
Result: Clean

IopTraverseDeviceTreeNode() / IopTraverseDeviceTree()
Info: Google finds only ReactOS results. I haven't checked other information sources
Result: ?

IopCreateDeviceKeyPath()
Info: Google finds only ReactOS results. I haven't checked other information sources
Result: ? afaik Hartmut Birr is the author, and he always claimed he never uses reverse engineering methods

IopSetDeviceInstanceData()
Info: Google finds only ReactOS results. I haven't checked other information sources
Result: ?

IopAssignDeviceResources()
Info:
	Google finds only ReactOS results.
	Creates a allocated resource list by using the resource requirements list. It doesn't do resource arbitration.
	Structures are documented at http://www.osronline.com/DDKx/kmarch/k112_5quq.htm and http://www.osronline.com/DDKx/kmarch/k112_92k2.htm
	There is a goto usage, to prevent duplication of resources cleanup code
Result: Clean

IopGetParentIdPrefix()
Info:
	Google finds only ReactOS results.
	Creates a prefix for the device instance string, when it may be not unique on the whole computer.
	The prefix is the crc32 of the instance path of the parent device node.
Result: Clean

IopActionInterrogateDeviceStack()
Info:
	Google finds only ReactOS results. I haven't checked other information sources
	Sends lots of IRP_MJ_PNP Irps to fill the device node structure
Result: Probably clean

IopActionConfigureChildServices() / IopActionInitChildServices()
Info: Google finds only ReactOS results. I haven't checked other information sources
Result: ?

IopActionInitAllServices()
Result: Clean (<5 LOC)

IopActionInitBootServices()
Result: Clean (<5 LOC)

IopInitializePnpServices()
Result: Clean (<5 LOC)

IopInvalidateDeviceRelations()
Info: Fireball remembers there are sources of documentation for it
Result: probably Clean

IopSetRootDeviceInstanceData()
Result: Clean, because it's unimplemented

PnpInit()
Info: Documentation sources should be located
Result: ? Author(s) should be contacted

PnpInit2()
Result: Clean (<5 LOC)