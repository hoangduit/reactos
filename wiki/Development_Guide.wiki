#summary Development guide for ReactOS contributors using Visual Studio.
#sidebar TableOfContents
<wiki:toc max_depth="6" />

= Overview =
This guide will assume you have an out-of-the-box installation of Windows or ReactOS.  Starting from scratch, building ReactOS on Visual Studio requires some Development Tools, the ReactOS source, and some configuration.  This guide will assume a certain level of technical ability on your part, as this is a guide to compiling an operating system.

<br>
Also, please note that building ReactOS with Visual Studio is still a work in process.  ReactOS built with Visual Studio cannot yet successfully boot.

= Install Development Tools =
The tools you'll need are MS Visual Studio, an SVN Client, a Virtual Machine (not mandatory _per se_, but HIGHLY recommended), and a couple other utilities.

== Install Visual Studio 2012 ==
  Download link: http://www.microsoft.com/visualstudio/eng/downloads

  We support only MS Visual Studio 2012.  Other versions have not been tested and are not expected to work.  MS Visual Studio 2012 can be found at http://www.microsoft.com/visualstudio/eng/downloads.  Windows 8 users may want *(need?)* to install Visual Studio Express 2012 for Windows 8 instead.  Note that the Express version is free, and all 2012 versions require the Microsoft .NET 4.5 framework.  Visual Studio Express requires a free registration within 30 days of installation.

  There is a flaw in VS2012 related to .NET 4.5, and the fix can be found at http://www.microsoft.com/en-us/download/details.aspx?id=36020.  On first run, let VS2012 update itself with Update 3.  It's a shame that isn't included in the initial download as the update is about 2GB when installed.  Get comfortable or go do something else while this is happening.  You may want to run Windows Update after installation to ensure all related components are up to date.

== Install SVN Client ==

An SVN (Apache Subversion) client will allow you to access the source of ReactOS.

An SVN, client (named after the command name _svn_) is a versioning and revision control system that allows developers to control the changes made to the source code. If you have commit access, then you can commit your changes back to the ReactOS SVN repository.  We recommend and use TortoiseSVN, and this guide will assume it's the client you've installed. You can use another SVN client, but you'll need to configure it yourself.

=== Install TortoiseSVN ===

  Download link: http://tortoisesvn.net/downloads.html
  
  Make sure to download the right architecture (x86 or x64) for your system.  Windows XP users may need to update MSI installer (TortoiseSVN has a link).  Also note that TortoiseSVN comes with only language.  Additional language packs are available for download as well.

  TortoiseSVN does not install command line utilities by default, but this option can be selected during install.  Having the command line utilities installed is optional.

...

*SECTION INCOMPLETE?*

== Install a Virtual Machine ==

  A Virtual Machine (VM) will let you test the compiled operating system without modifying or risking data loss on your actual PC.  There are several great options to choose from.  We recommend !VirtualBox.

No matter which virtual machine software you decide to use, there is one concept to keep in mind when configuring a virtual machine. A virtual machine really is that - a generally-configurable machine, and not simply a full computer that happens to have a blank hard disk. In other words, a virtual machine is a motherboard that must be populated with other hardware components that you select. This subtle difference in perception, computer-with-blank-hard disk versus mother-board-that-can-be-populated-hardware-components, will assist you in configuring your virtual machine. For example, just as with a real computer, a virtual machine allows you to add virtual mass-storage hardware controllers, such as IDE or SATA interfaces, to which you might attach virtual hard disks or CD-ROM drives, after which might you leave a CD "inserted" into the virtual CD-ROM drive.

=== Install !VirtualBox ===

Download link: https://www.virtualbox.org/wiki/Downloads

  For Windows, Linux, OS X, and Solaris.  A full-featured and easy-to-use virtual machine.  This is the recommended virtual machine to use.  The [VirtualBox VirtualBox Setup Guide] has much more detailed setup information, but ultimately you'll be creating a virtual machine on your computer with 256 MB or 512 MB of RAM and a decent hard disk.  After you've [Setup_Guide#Building_the_ReactOS_Source created your ISO], you'll load that into the virtual machine and boot it.

==== Setting up !VirtualBox ====
This guide is for setting up !VirtualBox to use with the .ISO file compiled using Visual Studio 2012.  To start, open !VirtualBox.  Click on the blue New icon at the top and name your new virtual machine.  It can be whatever you want - I chose "VS2012 Build".<br>
https://reactos.googlecode.com/svn/wiki/VBox%20Setup%201%20-%20en.png

After that, select the amount of RAM you want your virtual machine to have.  ReactOS doesn't need much at all, so 256MB or 512MB should be more than enough.  What good is a virtual machine with no storage?  Choose "create a virtual hard drive now" and click Create.<br>
https://reactos.googlecode.com/svn/wiki/VBox%20Setup%202%20-%20en.png

A virtual hard disk is simply a file on your hard drive that will act like a hard disk for your virtual machine.  There are several virtual hard disk formats to choose from (VDI, VMDK, VHD, HDD, QED, and QCOW).  It's okay if you don't know what they are - it really doesn't matter.  If you have Windows 7, you may want to try the .VHD format because Windows 7 can mount it as a hard drive and let you interact with it directly (useful for copying files to & from the virtual machine).

Now you need to choose how the virtual hard drive will behave on your physical hard disk.  Fixed Size means it will always be the size that the virtual hard drive reports.  Dynamically Allocated means the virtual hard disk file will only take up as much space as it needs to (so empty parts of the virtual drive don't use any space on your physical hard disk).  You can choose either option.  In this example I chose Dynamically Allocated.<br>
https://reactos.googlecode.com/svn/wiki/VBox%20Setup%203%20-%20en.png

Next, name your virtual hard drive.  It doesn't matter what you call it.  The one in this example is called "VS2012 Build".  Now choose a size for the hard disk.  If you chose a Fixed Size drive, you'll likely want a smaller drive (1GB is plenty).  If you chose Dynamically Allocated, then the default size is fine since it won't be taking up that much space anyway.  Press Create.

==== Testing your Virtual Machine ====
You're all done with setup!  Select your virtual machine from the list, and click on the green arrow icon, Start.  Your virtual machine will begin to boot.

== Install Archiver/Data Compression utility ==

=== Free ===

Link: http://www.7-zip.org/

=== Commercial ===

Link: http://www.rarlab.com/

Link: http://www.winzip.com/

== Install Dependency Walker ==
  Download link: http://www.dependencywalker.com/

== Install !WinFlashTool ==
  Download link: http://winflashtool.sysprogs.com/

== Install Remote Debuggers ==
=== Install Microsoft Visual Studio 2012 Remote Debugger ===
=== Install Remote Tools for Visual Studio 2012 Update 1 ===
=== Install VisualDDK ===

= Consult JIRA =

JIRA is a bug tracking, issue tracking and project management software.

URL: http://jira.reactos.org/

= Pull Source Code From Repository =
You can get the source code via command line or with the TortoiseSVN Browser.

== Pull Source Code Using SVN GUI ==
...

When finished, your ReactOS source folder will have a green icon over it, like this:<br>
https://reactos.googlecode.com/svn/wiki/SVN%20Sync%206%20-%20en.png

This is the opposite making a commit.  If your source is outdated, or if you want to discard all changes you have made to your copy of the source, then you want to perform an SVN Update.  *Do not redownload the entire source.*  That is a waste of time and bandwidth. Navigate to your ReactOS source and right-click it.  Select "SVN Update" as in this screenshot:<br>
https://reactos.googlecode.com/svn/wiki/SVN%20Sync%202%20-%20en.png

Your copy of the source will begin to sync with the online version.  This window will notify you of the progress:<br>
https://reactos.googlecode.com/svn/wiki/SVN%20Sync%203%20-%20en.png

When finished, your ReactOS source will again have the green "no changes have been made" icon over it.

  Open the TortoiseSVN Browser.  It's likely located at Start -> TortoiseSVN -> TortoiseSVN Repository Browser.  Navigate to {{{https://reactos.googlecode.com/svn}}}.  In the left-hand pane, right click on the URL and select Checkout.

  https://reactos.googlecode.com/svn/wiki/SVN%20Browser%201%20-%20en.png

  Set "Checkout directory" to the folder you'd like to put the Repository Source in.  Make sure that Checkout Depth is set to Fully Recursive.  Click on OK.

  https://reactos.googlecode.com/svn/wiki/SVN%20Browser%202%20-%20en.png

  The Checkout process will begin.  This will take a while, so be patient.

  https://reactos.googlecode.com/svn/wiki/SVN%20Browser%203%20-%20en.png

  Once it's finished, you're ready to fire up Visual Studio!

== Pull Source Code Using SVN Command Line ==
  _(This is written for TortoiseSVN, but will likely work for other SVN command line utilities as well.)_

  Open up a Command Prompt and navigate to where you'd like to put the source code.

  If you're a member and you'd like commit access, use the following command (replace <<name@email.com>> with your Google Code email account).  Note that it's *https*, not http.<br>
  {{{svn checkout https://reactos.googlecode.com/svn/trunk/ reactos --username <<name@email.com>>}}}

  If you're not a member, or you'd like to download anonymously, you can get a read-only copy with the following command.  This time it's *http*.<br>
  {{{svn checkout http://reactos.googlecode.com/svn/trunk/ reactos-read-only}}}

  A recent checkout clocked in at 661MB, so this may take a while depending on your internet connection.  You only need to do this once.  After your initial download, all changes will be Updates or Commits.  See [TortoiseSVN].

== Special Files That Are Pulled ==

Ideally, we would be able to abstain from perturbing the official ReactOS file hierarchy to achieve an OS build, augmenting the hierarchy with one *`.sln`* file and many *`.vcxproj`* files. Unfortunately, total abstention is not possible because at least two *`.h`* files are generated at compile-time by *`cmake`*, and as stated previously, one of the primary reasons for creating our break-away project was to eliminate any dependency on *`cmake`*. To solve this dilemma, we simply copy, manually, *`cmake`*-generated header files to the locations where the *`.c`* files expect them to be, in our version of the ReactOS repository here at Google Code. Then, when the repository is pulled using SVN, these files will be included in the download. These files are as follows:

=== buildno.h ===

Multiple files in ReactOS include the *`cmake`*-generated *`buildno.h`* to know what build number of ReactOS is being built. This file is normally generated by *`cmake`* to be located at:

*`reactos\include\reactos\buildno.h`*

As can be seen by the following actual *`buildno.h`* that we use, it simply contains version information for the build of the OS:

{{{
/* Do not edit - Machine generated */
#ifndef _INC_REACTOS_BUILDNO
#define _INC_REACTOS_BUILDNO
#define KERNEL_VERSION_BUILD	20130406
#define KERNEL_VERSION_BUILD_HEX	0x0
#define KERNEL_VERSION_BUILD_STR	"20130406-rUNKNOWN"
#define KERNEL_VERSION_BUILD_RC	"20130406-rUNKNOWN\0"
#define KERNEL_RELEASE_RC	"0.4-SVN\0"
#define KERNEL_RELEASE_STR	"0.4-SVN"
#define KERNEL_VERSION_RC	"0.4-SVN\0"
#define KERNEL_VERSION_STR	"0.4-SVN"
#define REACTOS_DLL_VERSION_MAJOR	42
#define REACTOS_DLL_RELEASE_RC	"42.4-SVN\0"
#define REACTOS_DLL_RELEASE_STR	"42.4-SVN"
#define REACTOS_DLL_VERSION_RC	"42.4-SVN\0"
#define REACTOS_DLL_VERSION_STR	"42.4-SVN"
#endif
/* EOF */
}}}

*`buildno.h`* is generated by *`cmake`* from its companion file, *`buildno.h.cmake`*, located at:

*`reactos\include\reactos\buildno.h.cmake`*

...whose text is as follows:

{{{
/* Do not edit - Machine generated */
#ifndef _INC_REACTOS_BUILDNO
#define _INC_REACTOS_BUILDNO
#define KERNEL_VERSION_BUILD	@KERNEL_VERSION_BUILD@
#define KERNEL_VERSION_BUILD_HEX	0x@KERNEL_VERSION_BUILD_HEX@
#define KERNEL_VERSION_BUILD_STR	"@KERNEL_VERSION_BUILD@@REVISION@"
#define KERNEL_VERSION_BUILD_RC	"@KERNEL_VERSION_BUILD@@REVISION@\0"
#define KERNEL_RELEASE_RC	"@KERNEL_VERSION@\0"
#define KERNEL_RELEASE_STR	"@KERNEL_VERSION@"
#define KERNEL_VERSION_RC	"@KERNEL_VERSION@\0"
#define KERNEL_VERSION_STR	"@KERNEL_VERSION@"
#define REACTOS_DLL_VERSION_MAJOR	@REACTOS_DLL_VERSION_MAJOR@
#define REACTOS_DLL_RELEASE_RC	"@DLL_VERSION_STR@\0"
#define REACTOS_DLL_RELEASE_STR	"@DLL_VERSION_STR@"
#define REACTOS_DLL_VERSION_RC	"@DLL_VERSION_STR@\0"
#define REACTOS_DLL_VERSION_STR	"@DLL_VERSION_STR@"
#endif
/* EOF */
}}}

=== version.h ===

Multiple files in ReactOS include the *`cmake`*-generated *`version.h`* to know what version of ReactOS is being built. This file is normally generated by *`cmake`* to be located at:

*`reactos\include\reactos\version.h`*

As can be seen by the following actual *`version.h`* that we use, it simply contains version information for the OS:

{{{
/*
 * COPYRIGHT:   See COPYING in the top level directory
 * PROJECT:     ReactOS kernel
 * FILE:        include/internal/version.h
 * PURPOSE:     Defines the current version
 * PROGRAMMER:  David Welch (welch@mcmail.com)
 * REVISIONS:
 * 	1999-11-06 (ea)
 * 		Moved from include/internal in include/reactos
 *		to be used by buildno.
 *	2002-01-17 (ea)
 *		KERNEL_VERSION removed. Use
 *		reactos/buildno.h:KERNEL_VERSION_STR instead.
 */

#ifndef __VERSION_H
#define __VERSION_H

#define KERNEL_VERSION_MAJOR 0
#define KERNEL_VERSION_MINOR 4
#define KERNEL_VERSION_PATCH_LEVEL 0

#define COPYRIGHT_YEAR "2013"

/* KERNEL_VERSION_BUILD_TYPE is L"SVN", L"RC1", L"RC2" or L"" (for the release) */
#define KERNEL_VERSION_BUILD_TYPE "SVN"


#endif

/* EOF */
}}}

*`version.h`* is generated by *`cmake`* from its companion file, *`version.h.cmake`*, located at:

*`reactos\include\reactos\version.h.cmake`*

...whose text is as follows:

{{{
/*
 * COPYRIGHT:   See COPYING in the top level directory
 * PROJECT:     ReactOS kernel
 * FILE:        include/internal/version.h
 * PURPOSE:     Defines the current version
 * PROGRAMMER:  David Welch (welch@mcmail.com)
 * REVISIONS:
 * 	1999-11-06 (ea)
 * 		Moved from include/internal in include/reactos
 *		to be used by buildno.
 *	2002-01-17 (ea)
 *		KERNEL_VERSION removed. Use
 *		reactos/buildno.h:KERNEL_VERSION_STR instead.
 */

#ifndef __VERSION_H
#define __VERSION_H

#define KERNEL_VERSION_MAJOR @KERNEL_VERSION_MAJOR@
#define KERNEL_VERSION_MINOR @KERNEL_VERSION_MINOR@
#define KERNEL_VERSION_PATCH_LEVEL @KERNEL_VERSION_PATCH_LEVEL@

#define COPYRIGHT_YEAR "@COPYRIGHT_YEAR@"

/* KERNEL_VERSION_BUILD_TYPE is L"SVN", L"RC1", L"RC2" or L"" (for the release) */
#define KERNEL_VERSION_BUILD_TYPE "@KERNEL_VERSION_BUILD_TYPE@"


#endif

/* EOF */
}}}

= Load ReactOS.sln =
Open up Visual Studio, and load a new project (*.sln* files are called called solution files).  Navigate to the folder you put the source code in.  Navigate further to reactos\reactos\reactos.sln and open it.  This is an operating system, remember, so expect this to take a couple minutes.  Once it's done, you're ready to make some changes!

If you want to perform a test of compiling ReactOS, there's a couple changes you need to make.  Go to Build -> Configuration Manager.  Make sure that Active solution configuration is set to "Debug" and the Active solution platform to "x86_32".

https://reactos.googlecode.com/svn/wiki/VS%20Setup%202%20-%20en.png

=Create Visual Studio Projects=
==CMakeLists.txt==
===A Command-Line Tool===
===Message Codes (bugcodes.h)===
===ks386.inc===
===Boot Sector Image===
===Free Loader===
===An Import Library===
===NTOSKRNL.EXE===
===HAL.DLL===
===KDCOM.DLL===
===Bootvid.DLL===
===Registry Hives===
===A Kernel-Mode Driver===
===A User-Mode DLL===
===A User-Mode EXE===
==Project Properties==
===Common Properties===
====Framework and References====
===Configuration Properties===
====General====
=====Output Directory=====
=====Intermediate Directory=====
=====Configuration Type=====
=====Character Set=====
====Debugging====
====VC++ Directories====
====C/C++====
=====General=====
======Additional Include Directories======
======Resolve #using References======
======Debug Information Format======

1>advapi32_stubs.obj : warning LNK4075: ignoring '/EDITANDCONTINUE' due to '/OPT:LBR' specification
======Common Language RunTime Support======
======Consume Windows Runtime Extension======
======Suppress Startup Banner======
======Warning Level======
======Treat Warnings As Errors======
======Multi-processor Compilation======
User Unicode For Assembler Listing
=====Optimization=====
======Optimization======
======Inline Function Expansion======
======Enable Intrinsic Functions======
======Favor Size Or Speed======
======Omit Frame Pointers======
======Enable Fiber-Safe Optimizations======
======Whole Program Optimization======
=====Preprocessor=====
======Preprocessors Definitions======

{{{
1>------ Build started: Project: msvcrt, Configuration: Debug Win32 ------
1>  stubs.c
1>c:\users\john\desktop\google code\reactos\reactos\dll\win32\msvcrt\stubs.c(53): error C3861: '_inp': identifier not found
1>c:\users\john\desktop\google code\reactos\reactos\dll\win32\msvcrt\stubs.c(59): error C3861: '_inpw': identifier not found
1>c:\users\john\desktop\google code\reactos\reactos\dll\win32\msvcrt\stubs.c(65): error C3861: '_inpd': identifier not found
1>c:\users\john\desktop\google code\reactos\reactos\dll\win32\msvcrt\stubs.c(73): error C3861: '_outp': identifier not found
1>c:\users\john\desktop\google code\reactos\reactos\dll\win32\msvcrt\stubs.c(80): error C3861: '_outpw': identifier not found
1>c:\users\john\desktop\google code\reactos\reactos\dll\win32\msvcrt\stubs.c(87): error C3861: '_outpd': identifier not found
}}}

{{{
int MSVCRT__inp(
   unsigned short port)
{
    return _inp(port);
}
}}}

conio.h shows:

{{{
#if defined(_M_IX86) || defined(_M_X64)
int __cdecl _inp(unsigned short);
unsigned short __cdecl _inpw(unsigned short);
unsigned long __cdecl _inpd(unsigned short);
#endif /* _M_IX86 || _M_X64 */
}}}

{{{
_inp=__inbyte
_inpw=__inword
_inpd=__indword
}}}

Don’t forget to define WIN32_LEAN_AND_MEAN to speed-up edit-time parsing.
Undefine Preprocessor Definitions
Undefine All Preprocessor Definitions
Ignore Standard Include Paths
Preprocess to a File
Preprocess Suppress Line Numbers
Keep Comments

=====Code Generation=====
======Enable String Pooling======
======Enable Minimal Rebuild======
======Enable C++ Exceptions======
======Smaller Type Check======
======Basic Runtime Checks======
======Runtime Library======
======Struct Member Alignment======
======Security Check======
======Enable Function-Level Linking======
======Enable Enhanced Instruction Set======
======Enable Parallel Code Generation======
======Enable Enhanded Instruction Set======
======Floating Point Model======
======Enable Floating Point Exceptions======
======Create Hotpatchable Image======


=====Language=====
======Disable Language Extensions======
======Treat WChart_t As Built in Typye======
======Force Conformance in For Loop Scope======
======Enable Run-Time Type Information======
======Open MP Support======

=====Precompiled Headers=====
======Precompiled Header======
======Precompiled Header File======
======Precompiled Header Output File======

=====Output Files=====
======Expand Attributed Source======
======Assembler Output======
======Use Unicode For Assembler Listing======
======ASM List Location======
======Object File Name======
======Program Database File Name======
======Generate XML Document Files======
======XML Documentation File Name======

=====Browse Information=====
======Enable Browse Information======
======Browse Information File======

=====Advanced=====
======Calling Convention======
======Compile As======
======Disable Specific Warnings======
======Forced Include File======
======Force #using File======
======Show Includes======
======Use Full Paths======
======Omit Default Library Name======
======Internal Compiler Error Reporting======
======Treat Specific Warnings As Errors======


=====Command Line=====
====Linker====
=====General=====
======Output File======
======Show Progress======
======Version======
======Enable Incremental Linking======
======Suppress Startup Banner======
======Ignore Import Library======
======Register Output======
======Per-user Redirection======
======Additional Library Directories======
======Link Library Dependencies======
======Use Library Dependency Inputs======
======Link Status======
======Prevent Dll Binding======
======Treat Linker Warning As Errors======
======Force File Output======
======Create Hot Patchable Image======
======Specify Section Attributes======
=====Input=====
======Additional Dependencies======
======Ignore All Default Libraries======
======Ignore Specific Default Libraries======
======Module Definition File======
======Add Module to Assembly======
======Embed Managed Resource File======
======Force Symbol References======
======Delay Loaded Dlls======
======Assembly Link Resource======
=====Manifest File=====
======Generate Manifest======
======Manifest File======
======Allow Isolation======
======Enable User Account control (UAC)======
======UAC Execution Level======
======UAC Bypass UI Protection======

=====Debugging=====
======Generate Debug Info======
======Generate Program Database File======
======Strip Private Symbols======
======Generate Map File======
======Map File Name======
======Map Exports======
======Debuggable Assembly======
=====System=====
======Sub System======
======Minimum Required Version======
======Heap Reserve Size======
======Heap Commit Size======
======Stack Reserve Size======
======Stack Commit Size======
======Enable Large Addresses======
======Terminal Server======
======Swap Run From CD======
======Swap Run From Network======
======Driver======
=====Optimization=====
======References======
======Enable COMDAT Folding======
======Function Order======
======Profile Guided  Database======
======Link Time Code Generation======
=====Embedded IDL=====
======MIDL Commands======
======Ignore Embedded IDL======
======Merged IDL Base File Name======
======Type Library======
======Typelib Resource ID======
=====Windows Metadata=====
=====Advanced=====
======Entry Point======
======No Entry Point======
======Set Checksum======
======Base Address======
======Randomized Base Address======
======Fixed Base Address======
======Data Execution Prevention (DEP)======
======Tunr Off Assembly Generation======
======Unload delay loaded DLL======
======Nobind delay loaded DLL======
======Import Library======
======Merge Sections======
======Target Machine======
======Profile======
======CLR Thread Attribute======
======CLR Image Type======
======Key File======
======Key Container======
======Delay Sign======
======CLR Unmanaged Code Check======
======Detect One Definition Rule violations======
======Error Reporting======
======Section Alignment======
======Preserve Last Error Code for PInvoke Calls======
======Image Has Safe Exception Handlers======
=====All Options=====
=====Command-Line=====
Librarian
General
Output File
Additional Dependencies
Additional Library Dependencies
Suppress Startup Banner
Module Definition File Name
Ignore All Default Libraries
Export Named Functions
Force Symbol References
Use Unicode Response Files
Link Library Dependencies
Error Reporting
Treat Lib Warning As Errors
Target Machine
Subsystem
Minimum Required Version
Remove Objects
Verbose
Name
Link Time Code Generation

Command Line
All Options
Additional Options
Inherit from parent or project defaults
====Manifest Tool====
=====General=====
======Suppress Startup Banner======
======Verbose Output======
======Assembly Identity======
=====Input and Output=====
======Additional Manifest Files======
======Input Resource Manifests======
======Embed Manifest======
======Output Manifest File======
======Manifest Resource File======
======Generate Catalog Files======
======Generated Manifest From Managed Assembly======
======Suppress Dependency Element======
======Generate Category Tags======
======Enable DPI Awareness======

=====Isolated COM=====
======Type Library File======
======Registrar Script File======
======Component File Name======
======Replacements File======

=====Advanced=====
======Update File Hashes======
======Update File Hashes Search Path======
Command Line
====Resources====
=====General=====
When a .rc files contains a #include, the resource compiler will sometimes complain that it cannot find the file that is being included, even though the programmer has specified the path to the included file in the IDE settings. The reason is that the programmer is in error – he did, indeed, specify a path, but for C/C++ files, not for .rc files. The .rc files in question must have their #include’s updated accordingly.

======Preprocess Definitions======
======Use Undefine Preprocessor Definitions======
======Culture======
======Additional Include Directories======
======Ignore Standard Include Paths======
======Show Progress======
======Suppress Startup Banner======
======Resource File Name======
======Null Terminate Strings======
=====Command Line=====
====XML Document Generator====
=====General=====
======Suppress Startup Banner======
======Additional Document File======
======Output Document File======
======Document Library Dependencies======
=====Command Line=====
====Browse Information====
=====General=====
======Suppress Startup Banner======
======Output File======
======Preserve SBR Files======
=====Command Line======
====Build Events====
=====Pre-Build Event=====
======Command Line======
======Description======
======Use In Build======
=====Pre-Link Event=====
======Command Line======
======Description======
======Use In Build======
=====Post-Build Event=====
======Command Line======
======Description======
======Use In Build======
====Custom Build Step====
=====General=====
====Custom Build Tool====
====Code Analysis====

Our example for creating a user-mode *`.EXE`* is *`calc.exe`*.<br>
Use *`Explorer.exe`* to locate the source code for *`calc.exe`*. It is the directory at:<br>
*`reactos\base\applications\calc`*:
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/1.png
Open its *`CMakeLists.txt`* file to determine what we should do to create *`calc.vcxproj`*:
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/2.png<br>
Looking at the *`CMakLists.txt`* file, we make the following determinations:<br>
{{{
add_definitions(-DDISABLE_HTMLHELP_SUPPORT=1)
}}}
…means that we will have to add a *`#define`* to the IDE settings that effectively does this for all *`.c/.cpp/etc.`* files:<br>
{{{
#define DDISABLE_HTMLHELP_SUPPORT 1
}}}
{{{
add_executable(calc
}}}
…shows us that there are seven source files that will be compiled to generate *`calc.exe`*. They are:
{{{
    about.c
    convert.c
    function.c
    rpn.c
    utl.c
    winmain.c
    resource.rc
}}}
{{{
set_module_type(calc win32gui UNICODE)
}}}
…tells us that the output of the build of the project will be a Windows 32-bit *`.EXE`* that has a GUI (unlike a console application). It will use *`UNICODE`*, so throughout the source code, *`TCHAR`* will be defined as *`WCHAR`* and not *`CHAR`*.
{{{
add_importlibs(calc advapi32 user32 gdi32 msvcrt kernel32)
}}}
…tells us that *`calc.exe`* will depend upon several *`.DLL`*’s to execute, and therefore must be linked with their corresponding *`.LIB`* files at build time. 
{{{
if(MSVC)
    add_importlibs(calc ntdll)
endif()
}}}
…tells us that, if our compiler is Microsoft Visual C, then *`calc.exe`* will also depend on *`ntdll.dll`*, and therefore, must be linked with the import library that corresponds to *`ntdll.dll`*.
{{{
add_pch(calc calc.h)
}}}

…tells us that the header file that would be used to generate a pre-compiled header (*`.pch`*) file is *`calc.h`*. Since *`calc.exe`* is a very small program in terms of number of lines of code, we forego utilization the pre-compiled header compilation optimization.
{{{
add_cd_file(TARGET calc DESTINATION reactos/system32 FOR all)
}}}
..tells us that, after *`calc.exe`* is built, if we choose to place it on the OS CD, it should be copied to:<br>
*`reactos/system32`*<br>
We must remember to modify the *`CD_Live`* project accordingly, so that *`calc.exe`* is included in the CD-generation process when building *`CD_Live`*.<br>
Normally, we would be able to add *`calc.vcxproj`* to *`reactos.sln`* by right-clicking in *`Solution Explorer`* the node in the hierarchy that is to be the parent of *`calc.vcxproj`*. However, with Visual Studio 2012 Express, you will find that Microsoft has disallowed choosing the initial location within the hierarchy, and instead, forces the generation of *`calc`* at an arbitrary location: as a child of the root of the solution. 
No matter. Right-click on the root of the solution hierarchy in *`Solution Explorer`* and do *`Add->New Project…`*
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/3.png<br>
A dialog box will give you the choice of which type of Visual C++ project you would like to add. Since *`calc.exe`* is a Win32 GUI executable, choosing *`Win32 Project`* might seem appropriate, but it turns out that it does not matter which of these you choose, as the project type can be easily changed later. For purpose of illustration, we choose *`Empty Project`*. 
We choose the name *`calc`*, which causes Visual Studio to choose the name of the *`.vcxproj`* file to be *`calc.vcxproj`*.
We very carefully choose the *`Location:`* on disk where the *`calc.vcxproj`* file should be placed by Visual Studio. Visual Studio knows that the name of the project is *`calc`*, so it creates a directory called *`calc`* somewhere, no matter what we do. We cannot stop it from creating a directory. Therefore, the *`Location:`* option should be the parent directory of the directory *`calc`* that will be created. When trying to create the *`calc`* directory, Visual Studio will see that it already exists, and proceed as if it did not. Then, *`calc.vcxproj`* will be placed inside the *`calc`* directory. <br>This is the process that we keep in mind as we overlay *`.vcxproj`* files onto the extant ReactOS source code hierarchy: Visual Studio would normally attempt to create a directory that, in general, will already exist.<br>
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/4.png<br>
After creating *`calc`*, we use *`Explorer.exe`* to verify that the *`calc`* direcotry and other Visual Studio files are as they should be:<br>
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/5.png<br>
The new project, *`calc`*, now appears in *`Solution Explorer`*, but because we are using a free version of Visual Studio 2012, Microsoft successfully annoys us by placing *`calc`* project as the child of the root of the solution:<br>
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/6.png<br>
The root of the solution is obviously not the correct location. The correct parent for *`calc`* is a *`Solution Explorer`* folder called *`applications`*. In other words, *`calc`* should be a sibling of *`atactl`*:

https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/7.png
Normally, with a paid version of Visual Studio, we would be able to:
  # Right-click on *`calc`*.
  # Select *`cut`*.
  # Right-click on *`applications`*.
  # Select *`paste`*.<br>

…and *`calc`* would be moved to its correct location. However, cut-and-paste of projects is not supported in VS2012 Express, so we must drag-and-drop *`calc`* to *`applications`*:
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/8.png

At this point, *`calc.vcxproj`* exists on disk, but *`calc.vcxproj`* does not reference any source files *`(.c/.h/etc.)`*. We must add the files to the project. We expand-out *`calc`* to see the default solution filters for *`calc`*. There are three of them, plus the pseudo-filter *`External Dependencies`* that can neither be created nor deleted by us:<br>

https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/9.png

https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/10.png

https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/11.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/12.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/13.png

https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/14.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/15.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/16.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/17.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/18.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/19.png


https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/20.png


https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/21.png

https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/22.png


https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/23.png


https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/24.png


https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/25.png
https://reactos.googlecode.com/svn/wiki/Development_Guide/Create_Visual_Studio_Projects/Create_Project_For_User_Mode_EXE/26.png


== Create Project To Generate CD ==
== Create Project To Generate SD Card ==
= Develop =
== Edit ==
=== Edit C/C++ Code ===
=== Edit Language Files ===
== Build ==
=== Build According to CPU Type ===
=== Build According to Debug or Release ===
=== Build A Single File ===
=== Build A Group Of Files ===
=== Build A Single Project ===
=== Build A Group Of Projects ===
=== Build A ReactOS Image ===

Once you've got your Active Solution configured, all you have to do is hit F7 to build the Debug x86_32 version of ReactOS.sln (solution).  Expect this step to take a while to complete.  When it's done compiling, you'll find the *`ReactOS_CD_Live.ISO`* at:<br>
*`reactos\reactos\_IMAGES\CD_Live\build\x86_32\Debug\ReactOS_CD_Live.ISO`*
=== Build Everything ===
=== Clean ===
=== Rebuild ===
== Deploy ==
=== Deploy CD ===
If you haven't yet created the ReactOS ISO, go back to wherever you left off in the [Setup_Guide Setup Guide] and finish the process.  Once you've got your ISO, open up !VirtualBox again.

Now click the yellow gear button at the top, Settings.  Go to Storage and then choose "Empty" (your virtual machine's CD drive).  Click the disc icon on the far right to access the drop-down menu, and select "Choose a virtual CD/DVD disk file..."  Choose the .ISO file you built with VS2012.  This puts the ReactOS Boot Disc into the virtual machine.  Press OK.<br>
https://reactos.googlecode.com/svn/wiki/VBox%20Setup%204%20-%20en.png
=== Deploy SD Card ===
== Debug ==
When things don't work according to plan, it's time to debug your code.  *Blah, blah, blah finish this later - PuTTY config for debug logs*

Currently, ReactOS built with Visual Studio doesn't yet boot.  This is a screenshot of the BSOD that occurs once it's booted as far as it can:<br>
  https://reactos.googlecode.com/svn/wiki/Good%20BSOD.png
=== Debug User-Mode Executable ===
=== Debug Kernel-Mode Executable ===
= Save ReactOS.sln =
= Push Source Code To Respository =
  == SVN Commits ==
If you have made changes to the ReactOS source and you want to send those changes upstream to the ReactOS SVN repository, then you want to make a _commit_.  Note that commits made here only affect this database; you are not directly submitting commits to the official ReactOS trunk located at http://www.ReactOS.org/.

To submit a commit, it is best to not have Visual Studio running.  Navigate Windows Explorer to your ReactOS source folder.  It will look something like this:<br>
https://reactos.googlecode.com/svn/wiki/SVN%20Sync%201%20-%20en.png

Note the red icon on the folder.  This indicates that you have made changes to your source since you last committed/synced.  Right-click on the folder and select SVN Commit.  (Note in this screen shot that a different option is highlighted.)<br>
https://reactos.googlecode.com/svn/wiki/SVN%20Sync%202%20-%20en.png


== Resolving Conflicts ==
Sometimes you will try to update or commit a file that has been changed online and changed by you.  This results in a conflict, which looks like this:<br>
https://reactos.googlecode.com/svn/wiki/SVN%20Sync%204%20-%20en.png

To resolve the conflict, you must decide to use the online copy ("theirs") , or your own copy ("mine").  You can also compare the two, and even open your copy to make changes as needed.  These are your available options:<br>
https://reactos.googlecode.com/svn/wiki/SVN%20Sync%205%20-%20en.png

In this example, I chose to discard my copy and use "theirs".

When finished dealing with conflicts, you will again have the green icon over your ReactOS source folder.

= Update JIRA =
= Known Errors =